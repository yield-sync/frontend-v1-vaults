/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type WithdrawalRequestStruct = {
  forEther: PromiseOrValue<boolean>;
  forERC20: PromiseOrValue<boolean>;
  forERC721: PromiseOrValue<boolean>;
  creator: PromiseOrValue<string>;
  to: PromiseOrValue<string>;
  token: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
  tokenId: PromiseOrValue<BigNumberish>;
  forVoteCount: PromiseOrValue<BigNumberish>;
  againstVoteCount: PromiseOrValue<BigNumberish>;
  latestRelevantApproveVoteTime: PromiseOrValue<BigNumberish>;
  votedMembers: PromiseOrValue<string>[];
};

export type WithdrawalRequestStructOutput = [
  boolean,
  boolean,
  boolean,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string[]
] & {
  forEther: boolean;
  forERC20: boolean;
  forERC721: boolean;
  creator: string;
  to: string;
  token: string;
  amount: BigNumber;
  tokenId: BigNumber;
  forVoteCount: BigNumber;
  againstVoteCount: BigNumber;
  latestRelevantApproveVoteTime: BigNumber;
  votedMembers: string[];
};

export interface IYieldSyncV1VaultInterface extends utils.Interface {
  functions: {
    "YieldSyncV1VaultRecord()": FunctionFragment;
    "addAdmin(address)": FunctionFragment;
    "addMember(address)": FunctionFragment;
    "againstVoteCountRequired()": FunctionFragment;
    "createWithdrawalRequest(bool,bool,bool,address,address,uint256,uint256)": FunctionFragment;
    "deleteWithdrawalRequest(uint256)": FunctionFragment;
    "forVoteCountRequired()": FunctionFragment;
    "idsOfOpenWithdrawalRequests()": FunctionFragment;
    "processWithdrawalRequest(uint256)": FunctionFragment;
    "removeAdmin(address)": FunctionFragment;
    "removeMember(address)": FunctionFragment;
    "signatureManager()": FunctionFragment;
    "updateAgainstVoteCountRequired(uint256)": FunctionFragment;
    "updateForVoteCountRequired(uint256)": FunctionFragment;
    "updateSignatureManager(address)": FunctionFragment;
    "updateWithdrawalDelaySeconds(uint256)": FunctionFragment;
    "updateWithdrawalRequest(uint256,(bool,bool,bool,address,address,address,uint256,uint256,uint256,uint256,uint256,address[]))": FunctionFragment;
    "voteOnWithdrawalRequest(uint256,bool)": FunctionFragment;
    "withdrawalDelaySeconds()": FunctionFragment;
    "withdrawalRequestId_withdralRequest(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "YieldSyncV1VaultRecord"
      | "addAdmin"
      | "addMember"
      | "againstVoteCountRequired"
      | "createWithdrawalRequest"
      | "deleteWithdrawalRequest"
      | "forVoteCountRequired"
      | "idsOfOpenWithdrawalRequests"
      | "processWithdrawalRequest"
      | "removeAdmin"
      | "removeMember"
      | "signatureManager"
      | "updateAgainstVoteCountRequired"
      | "updateForVoteCountRequired"
      | "updateSignatureManager"
      | "updateWithdrawalDelaySeconds"
      | "updateWithdrawalRequest"
      | "voteOnWithdrawalRequest"
      | "withdrawalDelaySeconds"
      | "withdrawalRequestId_withdralRequest"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "YieldSyncV1VaultRecord",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addMember",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "againstVoteCountRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createWithdrawalRequest",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteWithdrawalRequest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "forVoteCountRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "idsOfOpenWithdrawalRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "processWithdrawalRequest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMember",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "signatureManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateAgainstVoteCountRequired",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateForVoteCountRequired",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSignatureManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWithdrawalDelaySeconds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWithdrawalRequest",
    values: [PromiseOrValue<BigNumberish>, WithdrawalRequestStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "voteOnWithdrawalRequest",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalDelaySeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalRequestId_withdralRequest",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "YieldSyncV1VaultRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "againstVoteCountRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWithdrawalRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteWithdrawalRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forVoteCountRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "idsOfOpenWithdrawalRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processWithdrawalRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signatureManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAgainstVoteCountRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateForVoteCountRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSignatureManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWithdrawalDelaySeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWithdrawalRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteOnWithdrawalRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalDelaySeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalRequestId_withdralRequest",
    data: BytesLike
  ): Result;

  events: {
    "CreatedWithdrawalRequest(uint256)": EventFragment;
    "DeletedWithdrawalRequest(uint256)": EventFragment;
    "MemberVoted(uint256,address,bool)": EventFragment;
    "TokensWithdrawn(address,address,uint256)": EventFragment;
    "UpdatedAgainstVoteCountRequired(uint256)": EventFragment;
    "UpdatedForVoteCountRequired(uint256)": EventFragment;
    "UpdatedSignatureManger(address)": EventFragment;
    "UpdatedWithdrawalDelaySeconds(uint256)": EventFragment;
    "UpdatedWithdrawalRequest(tuple)": EventFragment;
    "WithdrawalRequestReadyToBeProcessed(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreatedWithdrawalRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeletedWithdrawalRequest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberVoted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensWithdrawn"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdatedAgainstVoteCountRequired"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdatedForVoteCountRequired"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedSignatureManger"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdatedWithdrawalDelaySeconds"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedWithdrawalRequest"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WithdrawalRequestReadyToBeProcessed"
  ): EventFragment;
}

export interface CreatedWithdrawalRequestEventObject {
  withdrawalRequestId: BigNumber;
}
export type CreatedWithdrawalRequestEvent = TypedEvent<
  [BigNumber],
  CreatedWithdrawalRequestEventObject
>;

export type CreatedWithdrawalRequestEventFilter =
  TypedEventFilter<CreatedWithdrawalRequestEvent>;

export interface DeletedWithdrawalRequestEventObject {
  withdrawalRequestId: BigNumber;
}
export type DeletedWithdrawalRequestEvent = TypedEvent<
  [BigNumber],
  DeletedWithdrawalRequestEventObject
>;

export type DeletedWithdrawalRequestEventFilter =
  TypedEventFilter<DeletedWithdrawalRequestEvent>;

export interface MemberVotedEventObject {
  withdrawalRequestId: BigNumber;
  member: string;
  vote: boolean;
}
export type MemberVotedEvent = TypedEvent<
  [BigNumber, string, boolean],
  MemberVotedEventObject
>;

export type MemberVotedEventFilter = TypedEventFilter<MemberVotedEvent>;

export interface TokensWithdrawnEventObject {
  withdrawer: string;
  token: string;
  amount: BigNumber;
}
export type TokensWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  TokensWithdrawnEventObject
>;

export type TokensWithdrawnEventFilter = TypedEventFilter<TokensWithdrawnEvent>;

export interface UpdatedAgainstVoteCountRequiredEventObject {
  againstVoteCountRequired: BigNumber;
}
export type UpdatedAgainstVoteCountRequiredEvent = TypedEvent<
  [BigNumber],
  UpdatedAgainstVoteCountRequiredEventObject
>;

export type UpdatedAgainstVoteCountRequiredEventFilter =
  TypedEventFilter<UpdatedAgainstVoteCountRequiredEvent>;

export interface UpdatedForVoteCountRequiredEventObject {
  forVoteCountRequired: BigNumber;
}
export type UpdatedForVoteCountRequiredEvent = TypedEvent<
  [BigNumber],
  UpdatedForVoteCountRequiredEventObject
>;

export type UpdatedForVoteCountRequiredEventFilter =
  TypedEventFilter<UpdatedForVoteCountRequiredEvent>;

export interface UpdatedSignatureMangerEventObject {
  signatureManager: string;
}
export type UpdatedSignatureMangerEvent = TypedEvent<
  [string],
  UpdatedSignatureMangerEventObject
>;

export type UpdatedSignatureMangerEventFilter =
  TypedEventFilter<UpdatedSignatureMangerEvent>;

export interface UpdatedWithdrawalDelaySecondsEventObject {
  withdrawalDelaySeconds: BigNumber;
}
export type UpdatedWithdrawalDelaySecondsEvent = TypedEvent<
  [BigNumber],
  UpdatedWithdrawalDelaySecondsEventObject
>;

export type UpdatedWithdrawalDelaySecondsEventFilter =
  TypedEventFilter<UpdatedWithdrawalDelaySecondsEvent>;

export interface UpdatedWithdrawalRequestEventObject {
  withdrawalRequest: WithdrawalRequestStructOutput;
}
export type UpdatedWithdrawalRequestEvent = TypedEvent<
  [WithdrawalRequestStructOutput],
  UpdatedWithdrawalRequestEventObject
>;

export type UpdatedWithdrawalRequestEventFilter =
  TypedEventFilter<UpdatedWithdrawalRequestEvent>;

export interface WithdrawalRequestReadyToBeProcessedEventObject {
  withdrawalRequestId: BigNumber;
}
export type WithdrawalRequestReadyToBeProcessedEvent = TypedEvent<
  [BigNumber],
  WithdrawalRequestReadyToBeProcessedEventObject
>;

export type WithdrawalRequestReadyToBeProcessedEventFilter =
  TypedEventFilter<WithdrawalRequestReadyToBeProcessedEvent>;

export interface IYieldSyncV1Vault extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IYieldSyncV1VaultInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    YieldSyncV1VaultRecord(overrides?: CallOverrides): Promise<[string]>;

    addAdmin(
      targetAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addMember(
      targetAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    againstVoteCountRequired(overrides?: CallOverrides): Promise<[BigNumber]>;

    createWithdrawalRequest(
      forEther: PromiseOrValue<boolean>,
      forERC20: PromiseOrValue<boolean>,
      forERC721: PromiseOrValue<boolean>,
      to: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteWithdrawalRequest(
      withdrawalRequestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    forVoteCountRequired(overrides?: CallOverrides): Promise<[BigNumber]>;

    idsOfOpenWithdrawalRequests(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    processWithdrawalRequest(
      withdrawalRequestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeAdmin(
      member: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeMember(
      member: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signatureManager(overrides?: CallOverrides): Promise<[string]>;

    updateAgainstVoteCountRequired(
      _againstVoteCountRequired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateForVoteCountRequired(
      _forVoteCountRequired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSignatureManager(
      _signatureManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateWithdrawalDelaySeconds(
      _withdrawalDelaySeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateWithdrawalRequest(
      withdrawalRequestId: PromiseOrValue<BigNumberish>,
      __withdrawalRequest: WithdrawalRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voteOnWithdrawalRequest(
      withdrawalRequestId: PromiseOrValue<BigNumberish>,
      vote: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawalDelaySeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawalRequestId_withdralRequest(
      withdrawalRequestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[WithdrawalRequestStructOutput]>;
  };

  YieldSyncV1VaultRecord(overrides?: CallOverrides): Promise<string>;

  addAdmin(
    targetAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addMember(
    targetAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  againstVoteCountRequired(overrides?: CallOverrides): Promise<BigNumber>;

  createWithdrawalRequest(
    forEther: PromiseOrValue<boolean>,
    forERC20: PromiseOrValue<boolean>,
    forERC721: PromiseOrValue<boolean>,
    to: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteWithdrawalRequest(
    withdrawalRequestId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  forVoteCountRequired(overrides?: CallOverrides): Promise<BigNumber>;

  idsOfOpenWithdrawalRequests(overrides?: CallOverrides): Promise<BigNumber[]>;

  processWithdrawalRequest(
    withdrawalRequestId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeAdmin(
    member: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeMember(
    member: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signatureManager(overrides?: CallOverrides): Promise<string>;

  updateAgainstVoteCountRequired(
    _againstVoteCountRequired: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateForVoteCountRequired(
    _forVoteCountRequired: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSignatureManager(
    _signatureManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateWithdrawalDelaySeconds(
    _withdrawalDelaySeconds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateWithdrawalRequest(
    withdrawalRequestId: PromiseOrValue<BigNumberish>,
    __withdrawalRequest: WithdrawalRequestStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voteOnWithdrawalRequest(
    withdrawalRequestId: PromiseOrValue<BigNumberish>,
    vote: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawalDelaySeconds(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawalRequestId_withdralRequest(
    withdrawalRequestId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<WithdrawalRequestStructOutput>;

  callStatic: {
    YieldSyncV1VaultRecord(overrides?: CallOverrides): Promise<string>;

    addAdmin(
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addMember(
      targetAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    againstVoteCountRequired(overrides?: CallOverrides): Promise<BigNumber>;

    createWithdrawalRequest(
      forEther: PromiseOrValue<boolean>,
      forERC20: PromiseOrValue<boolean>,
      forERC721: PromiseOrValue<boolean>,
      to: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteWithdrawalRequest(
      withdrawalRequestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    forVoteCountRequired(overrides?: CallOverrides): Promise<BigNumber>;

    idsOfOpenWithdrawalRequests(
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    processWithdrawalRequest(
      withdrawalRequestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeAdmin(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMember(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    signatureManager(overrides?: CallOverrides): Promise<string>;

    updateAgainstVoteCountRequired(
      _againstVoteCountRequired: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateForVoteCountRequired(
      _forVoteCountRequired: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSignatureManager(
      _signatureManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWithdrawalDelaySeconds(
      _withdrawalDelaySeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWithdrawalRequest(
      withdrawalRequestId: PromiseOrValue<BigNumberish>,
      __withdrawalRequest: WithdrawalRequestStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    voteOnWithdrawalRequest(
      withdrawalRequestId: PromiseOrValue<BigNumberish>,
      vote: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawalDelaySeconds(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalRequestId_withdralRequest(
      withdrawalRequestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<WithdrawalRequestStructOutput>;
  };

  filters: {
    "CreatedWithdrawalRequest(uint256)"(
      withdrawalRequestId?: null
    ): CreatedWithdrawalRequestEventFilter;
    CreatedWithdrawalRequest(
      withdrawalRequestId?: null
    ): CreatedWithdrawalRequestEventFilter;

    "DeletedWithdrawalRequest(uint256)"(
      withdrawalRequestId?: null
    ): DeletedWithdrawalRequestEventFilter;
    DeletedWithdrawalRequest(
      withdrawalRequestId?: null
    ): DeletedWithdrawalRequestEventFilter;

    "MemberVoted(uint256,address,bool)"(
      withdrawalRequestId?: null,
      member?: PromiseOrValue<string> | null,
      vote?: null
    ): MemberVotedEventFilter;
    MemberVoted(
      withdrawalRequestId?: null,
      member?: PromiseOrValue<string> | null,
      vote?: null
    ): MemberVotedEventFilter;

    "TokensWithdrawn(address,address,uint256)"(
      withdrawer?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): TokensWithdrawnEventFilter;
    TokensWithdrawn(
      withdrawer?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null
    ): TokensWithdrawnEventFilter;

    "UpdatedAgainstVoteCountRequired(uint256)"(
      againstVoteCountRequired?: null
    ): UpdatedAgainstVoteCountRequiredEventFilter;
    UpdatedAgainstVoteCountRequired(
      againstVoteCountRequired?: null
    ): UpdatedAgainstVoteCountRequiredEventFilter;

    "UpdatedForVoteCountRequired(uint256)"(
      forVoteCountRequired?: null
    ): UpdatedForVoteCountRequiredEventFilter;
    UpdatedForVoteCountRequired(
      forVoteCountRequired?: null
    ): UpdatedForVoteCountRequiredEventFilter;

    "UpdatedSignatureManger(address)"(
      signatureManager?: null
    ): UpdatedSignatureMangerEventFilter;
    UpdatedSignatureManger(
      signatureManager?: null
    ): UpdatedSignatureMangerEventFilter;

    "UpdatedWithdrawalDelaySeconds(uint256)"(
      withdrawalDelaySeconds?: null
    ): UpdatedWithdrawalDelaySecondsEventFilter;
    UpdatedWithdrawalDelaySeconds(
      withdrawalDelaySeconds?: null
    ): UpdatedWithdrawalDelaySecondsEventFilter;

    "UpdatedWithdrawalRequest(tuple)"(
      withdrawalRequest?: null
    ): UpdatedWithdrawalRequestEventFilter;
    UpdatedWithdrawalRequest(
      withdrawalRequest?: null
    ): UpdatedWithdrawalRequestEventFilter;

    "WithdrawalRequestReadyToBeProcessed(uint256)"(
      withdrawalRequestId?: null
    ): WithdrawalRequestReadyToBeProcessedEventFilter;
    WithdrawalRequestReadyToBeProcessed(
      withdrawalRequestId?: null
    ): WithdrawalRequestReadyToBeProcessedEventFilter;
  };

  estimateGas: {
    YieldSyncV1VaultRecord(overrides?: CallOverrides): Promise<BigNumber>;

    addAdmin(
      targetAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addMember(
      targetAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    againstVoteCountRequired(overrides?: CallOverrides): Promise<BigNumber>;

    createWithdrawalRequest(
      forEther: PromiseOrValue<boolean>,
      forERC20: PromiseOrValue<boolean>,
      forERC721: PromiseOrValue<boolean>,
      to: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteWithdrawalRequest(
      withdrawalRequestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    forVoteCountRequired(overrides?: CallOverrides): Promise<BigNumber>;

    idsOfOpenWithdrawalRequests(overrides?: CallOverrides): Promise<BigNumber>;

    processWithdrawalRequest(
      withdrawalRequestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeAdmin(
      member: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeMember(
      member: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signatureManager(overrides?: CallOverrides): Promise<BigNumber>;

    updateAgainstVoteCountRequired(
      _againstVoteCountRequired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateForVoteCountRequired(
      _forVoteCountRequired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSignatureManager(
      _signatureManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateWithdrawalDelaySeconds(
      _withdrawalDelaySeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateWithdrawalRequest(
      withdrawalRequestId: PromiseOrValue<BigNumberish>,
      __withdrawalRequest: WithdrawalRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voteOnWithdrawalRequest(
      withdrawalRequestId: PromiseOrValue<BigNumberish>,
      vote: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawalDelaySeconds(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalRequestId_withdralRequest(
      withdrawalRequestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    YieldSyncV1VaultRecord(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAdmin(
      targetAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addMember(
      targetAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    againstVoteCountRequired(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createWithdrawalRequest(
      forEther: PromiseOrValue<boolean>,
      forERC20: PromiseOrValue<boolean>,
      forERC721: PromiseOrValue<boolean>,
      to: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteWithdrawalRequest(
      withdrawalRequestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    forVoteCountRequired(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    idsOfOpenWithdrawalRequests(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    processWithdrawalRequest(
      withdrawalRequestId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeAdmin(
      member: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeMember(
      member: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signatureManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateAgainstVoteCountRequired(
      _againstVoteCountRequired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateForVoteCountRequired(
      _forVoteCountRequired: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSignatureManager(
      _signatureManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateWithdrawalDelaySeconds(
      _withdrawalDelaySeconds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateWithdrawalRequest(
      withdrawalRequestId: PromiseOrValue<BigNumberish>,
      __withdrawalRequest: WithdrawalRequestStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voteOnWithdrawalRequest(
      withdrawalRequestId: PromiseOrValue<BigNumberish>,
      vote: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawalDelaySeconds(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawalRequestId_withdralRequest(
      withdrawalRequestId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
