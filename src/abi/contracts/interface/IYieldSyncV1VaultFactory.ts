/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IYieldSyncV1VaultFactoryInterface extends utils.Interface {
  functions: {
    "YieldSyncGovernance()": FunctionFragment;
    "YieldSyncV1VaultRecord()": FunctionFragment;
    "defaultSignatureManager()": FunctionFragment;
    "deployYieldSyncV1Vault(address[],address[],address,bool,uint256,uint256,uint256)": FunctionFragment;
    "fee()": FunctionFragment;
    "transferEther(address)": FunctionFragment;
    "updateDefaultSignatureManager(address)": FunctionFragment;
    "updateFee(uint256)": FunctionFragment;
    "yieldSyncV1VaultAddress_yieldSyncV1VaultId(address)": FunctionFragment;
    "yieldSyncV1VaultIdTracker()": FunctionFragment;
    "yieldSyncV1VaultId_yieldSyncV1VaultAddress(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "YieldSyncGovernance"
      | "YieldSyncV1VaultRecord"
      | "defaultSignatureManager"
      | "deployYieldSyncV1Vault"
      | "fee"
      | "transferEther"
      | "updateDefaultSignatureManager"
      | "updateFee"
      | "yieldSyncV1VaultAddress_yieldSyncV1VaultId"
      | "yieldSyncV1VaultIdTracker"
      | "yieldSyncV1VaultId_yieldSyncV1VaultAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "YieldSyncGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "YieldSyncV1VaultRecord",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultSignatureManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deployYieldSyncV1Vault",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferEther",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDefaultSignatureManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "yieldSyncV1VaultAddress_yieldSyncV1VaultId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "yieldSyncV1VaultIdTracker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "yieldSyncV1VaultId_yieldSyncV1VaultAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "YieldSyncGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "YieldSyncV1VaultRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultSignatureManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployYieldSyncV1Vault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDefaultSignatureManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "yieldSyncV1VaultAddress_yieldSyncV1VaultId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yieldSyncV1VaultIdTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yieldSyncV1VaultId_yieldSyncV1VaultAddress",
    data: BytesLike
  ): Result;

  events: {
    "DeployedYieldSyncV1Vault(address)": EventFragment;
    "UpdatedDefaultSignatureManager(address)": EventFragment;
    "UpdatedFee(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeployedYieldSyncV1Vault"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdatedDefaultSignatureManager"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedFee"): EventFragment;
}

export interface DeployedYieldSyncV1VaultEventObject {
  vaultAddress: string;
}
export type DeployedYieldSyncV1VaultEvent = TypedEvent<
  [string],
  DeployedYieldSyncV1VaultEventObject
>;

export type DeployedYieldSyncV1VaultEventFilter =
  TypedEventFilter<DeployedYieldSyncV1VaultEvent>;

export interface UpdatedDefaultSignatureManagerEventObject {
  defaultSignatureManager: string;
}
export type UpdatedDefaultSignatureManagerEvent = TypedEvent<
  [string],
  UpdatedDefaultSignatureManagerEventObject
>;

export type UpdatedDefaultSignatureManagerEventFilter =
  TypedEventFilter<UpdatedDefaultSignatureManagerEvent>;

export interface UpdatedFeeEventObject {
  fee: BigNumber;
}
export type UpdatedFeeEvent = TypedEvent<[BigNumber], UpdatedFeeEventObject>;

export type UpdatedFeeEventFilter = TypedEventFilter<UpdatedFeeEvent>;

export interface IYieldSyncV1VaultFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IYieldSyncV1VaultFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    YieldSyncGovernance(overrides?: CallOverrides): Promise<[string]>;

    YieldSyncV1VaultRecord(overrides?: CallOverrides): Promise<[string]>;

    defaultSignatureManager(overrides?: CallOverrides): Promise<[string]>;

    deployYieldSyncV1Vault(
      admins: PromiseOrValue<string>[],
      members: PromiseOrValue<string>[],
      signatureManager: PromiseOrValue<string>,
      useDefaultSignatureManager: PromiseOrValue<boolean>,
      againstVoteCountRequired: PromiseOrValue<BigNumberish>,
      forVoteCountRequired: PromiseOrValue<BigNumberish>,
      withdrawalDelaySeconds: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferEther(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDefaultSignatureManager(
      _defaultSignatureManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    yieldSyncV1VaultAddress_yieldSyncV1VaultId(
      yieldSyncV1VaultAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    yieldSyncV1VaultIdTracker(overrides?: CallOverrides): Promise<[BigNumber]>;

    yieldSyncV1VaultId_yieldSyncV1VaultAddress(
      yieldSyncV1VaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  YieldSyncGovernance(overrides?: CallOverrides): Promise<string>;

  YieldSyncV1VaultRecord(overrides?: CallOverrides): Promise<string>;

  defaultSignatureManager(overrides?: CallOverrides): Promise<string>;

  deployYieldSyncV1Vault(
    admins: PromiseOrValue<string>[],
    members: PromiseOrValue<string>[],
    signatureManager: PromiseOrValue<string>,
    useDefaultSignatureManager: PromiseOrValue<boolean>,
    againstVoteCountRequired: PromiseOrValue<BigNumberish>,
    forVoteCountRequired: PromiseOrValue<BigNumberish>,
    withdrawalDelaySeconds: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  transferEther(
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDefaultSignatureManager(
    _defaultSignatureManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFee(
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  yieldSyncV1VaultAddress_yieldSyncV1VaultId(
    yieldSyncV1VaultAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  yieldSyncV1VaultIdTracker(overrides?: CallOverrides): Promise<BigNumber>;

  yieldSyncV1VaultId_yieldSyncV1VaultAddress(
    yieldSyncV1VaultId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    YieldSyncGovernance(overrides?: CallOverrides): Promise<string>;

    YieldSyncV1VaultRecord(overrides?: CallOverrides): Promise<string>;

    defaultSignatureManager(overrides?: CallOverrides): Promise<string>;

    deployYieldSyncV1Vault(
      admins: PromiseOrValue<string>[],
      members: PromiseOrValue<string>[],
      signatureManager: PromiseOrValue<string>,
      useDefaultSignatureManager: PromiseOrValue<boolean>,
      againstVoteCountRequired: PromiseOrValue<BigNumberish>,
      forVoteCountRequired: PromiseOrValue<BigNumberish>,
      withdrawalDelaySeconds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    transferEther(
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDefaultSignatureManager(
      _defaultSignatureManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    yieldSyncV1VaultAddress_yieldSyncV1VaultId(
      yieldSyncV1VaultAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yieldSyncV1VaultIdTracker(overrides?: CallOverrides): Promise<BigNumber>;

    yieldSyncV1VaultId_yieldSyncV1VaultAddress(
      yieldSyncV1VaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "DeployedYieldSyncV1Vault(address)"(
      vaultAddress?: PromiseOrValue<string> | null
    ): DeployedYieldSyncV1VaultEventFilter;
    DeployedYieldSyncV1Vault(
      vaultAddress?: PromiseOrValue<string> | null
    ): DeployedYieldSyncV1VaultEventFilter;

    "UpdatedDefaultSignatureManager(address)"(
      defaultSignatureManager?: null
    ): UpdatedDefaultSignatureManagerEventFilter;
    UpdatedDefaultSignatureManager(
      defaultSignatureManager?: null
    ): UpdatedDefaultSignatureManagerEventFilter;

    "UpdatedFee(uint256)"(fee?: null): UpdatedFeeEventFilter;
    UpdatedFee(fee?: null): UpdatedFeeEventFilter;
  };

  estimateGas: {
    YieldSyncGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    YieldSyncV1VaultRecord(overrides?: CallOverrides): Promise<BigNumber>;

    defaultSignatureManager(overrides?: CallOverrides): Promise<BigNumber>;

    deployYieldSyncV1Vault(
      admins: PromiseOrValue<string>[],
      members: PromiseOrValue<string>[],
      signatureManager: PromiseOrValue<string>,
      useDefaultSignatureManager: PromiseOrValue<boolean>,
      againstVoteCountRequired: PromiseOrValue<BigNumberish>,
      forVoteCountRequired: PromiseOrValue<BigNumberish>,
      withdrawalDelaySeconds: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    transferEther(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDefaultSignatureManager(
      _defaultSignatureManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    yieldSyncV1VaultAddress_yieldSyncV1VaultId(
      yieldSyncV1VaultAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yieldSyncV1VaultIdTracker(overrides?: CallOverrides): Promise<BigNumber>;

    yieldSyncV1VaultId_yieldSyncV1VaultAddress(
      yieldSyncV1VaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    YieldSyncGovernance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    YieldSyncV1VaultRecord(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    defaultSignatureManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployYieldSyncV1Vault(
      admins: PromiseOrValue<string>[],
      members: PromiseOrValue<string>[],
      signatureManager: PromiseOrValue<string>,
      useDefaultSignatureManager: PromiseOrValue<boolean>,
      againstVoteCountRequired: PromiseOrValue<BigNumberish>,
      forVoteCountRequired: PromiseOrValue<BigNumberish>,
      withdrawalDelaySeconds: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferEther(
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDefaultSignatureManager(
      _defaultSignatureManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFee(
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    yieldSyncV1VaultAddress_yieldSyncV1VaultId(
      yieldSyncV1VaultAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yieldSyncV1VaultIdTracker(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yieldSyncV1VaultId_yieldSyncV1VaultAddress(
      yieldSyncV1VaultId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
